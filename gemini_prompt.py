import os
from google.genai.types import (
    GenerateContentConfig,
    HarmBlockThreshold,
    HarmCategory,
    SafetySetting,
)
from pydantic import BaseModel

BASE_DIR = os.path.dirname(__file__)

HTML_GEMINI_CONFIG_FORM = ""
with open(f"{BASE_DIR}/pages/config.html", "r", encoding="utf8") as fhandle:
    HTML_GEMINI_CONFIG_FORM = fhandle.read()

SYSTEM_PROMPT = ""
with open(f"{BASE_DIR}/system_prompt.txt.txt", "r", encoding="utf8") as fhandle:
    SYSTEM_PROMPT = fhandle.read()

MODEL_ID = "gemini-2.0-flash"
TEMPERATURE = 0.0
TOP_P = 0.95
TOP_K = 10
CANDIDATE_COUNT = 1
SEED = 5

PLACEHOLDER = (
    "Ch√†o b·∫°n! M√¨nh l√† chatbot h·ªó tr·ª£ c·ªßa KNI Education, r·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£"
    " b·∫°n. B·∫°n c√≥ c√¢u h·ªèi n√†o v·ªÅ luy·ªán thi TestAS hay t∆∞ v·∫•n du h·ªçc ƒê·ª©c kh√¥ng?"
    " M√¨nh s·∫Ω c·ªë g·∫Øng tr·∫£ l·ªùi m·ªôt c√°ch chi ti·∫øt v√† ƒë·∫ßy ƒë·ªß nh·∫•t c√≥ th·ªÉ! üòä"
)

DEFAULT_RESPONSE = (
    "Xin l·ªói, m√¨nh ch∆∞a c√≥ th√¥ng tin v·ªÅ v·∫•n ƒë·ªÅ n√†y. B·∫°n vui l√≤ng li√™n h·ªá tr·ª±c"
    " ti·∫øp v·ªõi KNI qua s·ªë ƒëi·ªán tho·∫°i +84 091-839-1099 ho·∫∑c email nhat@kni.vn ƒë·ªÉ"
    " ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t nh√©! üò≥"
)

GREETING_RESPONSE = (
    "Ch√†o b·∫°n üëã M√¨nh l√† tr·ª£ l√Ω ·∫£o c·ªßa KNI Institute, r·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n."
    " M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ TestAS, c√°c kh√≥a h·ªçc luy·ªán thi, ho·∫∑c t∆∞ v·∫•n"
    " du h·ªçc ƒê·ª©c."
    "\n\n"
    "B·∫°n c√≥ th·ªÉ h·ªèi m√¨nh nh·ªØng c√¢u h·ªèi nh∆∞:\n"
    '- "TestAS l√† g√¨?"\n'
    '- "Luy·ªán thi TestAS ·ªü KNI c√≥ g√¨ kh√°c bi·ªát?"\n'
    '- "Du h·ªçc ƒê·ª©c c·∫ßn chu·∫©n b·ªã nh·ªØng g√¨?"'
    "\n\n"
    "N·∫øu b·∫°n c√≥ g√≥p √Ω g√¨ cho m√¨nh, h√£y d√πng l·ªánh /feedback <tin nh·∫Øn> nh√©. C·∫£m ∆°n b·∫°n ü•∞"
)

class BotMessage(BaseModel):
    message: str
    image_send_threshold: float
    image_urls: list[str]
    customer_potential: float

# === GenerateContentConfig ===
def get_chat_config():
    return GenerateContentConfig(
        system_instruction=SYSTEM_PROMPT,
        temperature=TEMPERATURE,
        top_p=TOP_P,
        top_k=TOP_K,
        candidate_count=CANDIDATE_COUNT,
        seed=SEED,
        safety_settings=[
            SafetySetting(
                category=HarmCategory.HARM_CATEGORY_HARASSMENT,
                threshold=HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,  # Block most
            ),
            SafetySetting(
                category=HarmCategory.HARM_CATEGORY_HATE_SPEECH,
                threshold=HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,  # Block most
            ),
            SafetySetting(
                category=HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
                threshold=HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,  # Block most
            ),
            SafetySetting(
                category=HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
                threshold=HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,  # Block most
            ),
        ],
    )


def get_evaluator_config():
    return GenerateContentConfig(
        temperature=TEMPERATURE,
        top_p=1,
        top_k=0,
        candidate_count=CANDIDATE_COUNT,
        seed=42,
        safety_settings=[
            SafetySetting(
                category=HarmCategory.HARM_CATEGORY_HARASSMENT,
                threshold=HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,  # Block most
            ),
            SafetySetting(
                category=HarmCategory.HARM_CATEGORY_HATE_SPEECH,
                threshold=HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,  # Block most
            ),
            SafetySetting(
                category=HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
                threshold=HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,  # Block most
            ),
            SafetySetting(
                category=HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
                threshold=HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,  # Block most
            ),
        ],
    )

def get_chat_config_json() ->GenerateContentConfig:
    chat_config = get_chat_config()
    chat_config.response_mime_type = "application/json"
    chat_config.response_schema = BotMessage
    return chat_config
